// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  passwordHash    String
  tier            String   @default("starter") // starter, standard, premium
  isActive        Boolean  @default(true)
  emailVerified   Boolean  @default(false)
  lastLoginAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relationships
  accounts        Account[]
  conversations   Conversation[]
  privacySettings PrivacySettings?
  
  @@map("users")
}

model Account {
  id            String   @id @default(cuid())
  plaidAccountId String  @unique
  name          String
  type          String
  subtype       String?
  mask          String?
  officialName  String?
  currentBalance Float?
  availableBalance Float?
  limit         Float?
  currency      String?
  institution   String?
  verificationStatus String?
  persistentAccountId String?
  lastSynced    DateTime?
  
  // User relationship
  userId        String?
  user          User?   @relation(fields: [userId], references: [id])
  
  transactions  Transaction[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model AccessToken {
  id            String    @id @default(cuid())
  token         String    @unique
  itemId        String?
  lastRefreshed DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model SyncStatus {
  id               String   @id @default(cuid())
  lastSync         DateTime?
  accountsSynced   Int      @default(0)
  transactionsSynced Int    @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Transaction {
  id              String   @id @default(cuid())
  plaidTransactionId String @unique
  account         Account  @relation(fields: [accountId], references: [id])
  accountId       String
  amount          Float
  date            DateTime
  name            String
  merchantName    String?
  originalDescription String?
  category        String?
  categoryId      String?
  pending         Boolean
  pendingTransactionId String?
  paymentChannel  String?
  paymentMethod   String?
  currency        String?
  authorizedDate  DateTime?
  checkNumber     String?
  location        String?
  lastSynced      DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Conversation {
  id        String   @id @default(cuid())
  question  String
  answer    String
  // Privacy: Store anonymized versions for AI context
  anonymizedQuestion String?
  anonymizedAnswer   String?
  
  // User relationship
  userId    String?
  user      User?   @relation(fields: [userId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PrivacySettings {
  id                    String   @id @default(cuid())
  // User preferences for data handling
  allowDataStorage      Boolean  @default(true)
  allowAITraining       Boolean  @default(false)
  anonymizeData         Boolean  @default(true)
  dataRetentionDays     Int      @default(30)
  
  // User relationship
  userId                String   @unique
  user                  User     @relation(fields: [userId], references: [id])
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}
