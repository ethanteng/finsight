generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  passwordHash    String
  tier            String           @default("starter")
  isActive        Boolean          @default(true)
  emailVerified   Boolean          @default(false)
  lastLoginAt     DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  accessTokens    AccessToken[]
  accounts        Account[]
  conversations   Conversation[]
  privacySettings PrivacySettings?
  syncStatuses    SyncStatus[]
  profile         UserProfile?

  @@map("users")
}

model Account {
  id                  String        @id @default(cuid())
  plaidAccountId      String        @unique
  name                String
  type                String
  subtype             String?
  mask                String?
  officialName        String?
  currentBalance      Float?
  availableBalance    Float?
  currency            String?
  institution         String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  lastSynced          DateTime?
  limit               Float?
  persistentAccountId String?
  verificationStatus  String?
  userId              String?
  user                User?         @relation(fields: [userId], references: [id])
  transactions        Transaction[]
}

model AccessToken {
  id            String    @id @default(cuid())
  token         String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  itemId        String?
  lastRefreshed DateTime?
  userId        String?
  user          User?     @relation(fields: [userId], references: [id])
}

model SyncStatus {
  id                 String    @id @default(cuid())
  lastSync           DateTime?
  accountsSynced     Int       @default(0)
  transactionsSynced Int       @default(0)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  userId             String?
  user               User?     @relation(fields: [userId], references: [id])
}

model Transaction {
  id                   String    @id @default(cuid())
  plaidTransactionId   String    @unique
  accountId            String
  amount               Float
  date                 DateTime
  name                 String
  category             String?
  pending              Boolean
  currency             String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  lastSynced           DateTime?
  authorizedDate       DateTime?
  categoryId           String?
  checkNumber          String?
  location             String?
  merchantName         String?
  originalDescription  String?
  paymentChannel       String?
  paymentMethod        String?
  pendingTransactionId String?
  account              Account   @relation(fields: [accountId], references: [id])
}

model Conversation {
  id                 String   @id @default(cuid())
  question           String
  answer             String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  anonymizedAnswer   String?
  anonymizedQuestion String?
  userId             String?
  user               User?    @relation(fields: [userId], references: [id])
}

model PrivacySettings {
  id                String   @id @default(cuid())
  allowDataStorage  Boolean  @default(true)
  allowAITraining   Boolean  @default(false)
  anonymizeData     Boolean  @default(true)
  dataRetentionDays Int      @default(30)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id])
}

model DemoSession {
  id            String             @id @default(cuid())
  sessionId     String             @unique
  userAgent     String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  conversations DemoConversation[]
}

model DemoConversation {
  id        String      @id @default(cuid())
  question  String
  answer    String
  sessionId String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  session   DemoSession @relation(fields: [sessionId], references: [id])
}

model UserProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  profileText String   @default("")
  lastUpdated DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // User relationship
  user        User     @relation(fields: [userId], references: [id])
  
  @@map("user_profiles")
}
