name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Code Quality & Security
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci

      - name: Lint backend
        run: |
          npx eslint src/ --ext .ts
          npx tsc --noEmit

      - name: Lint frontend
        run: |
          cd frontend
          npx eslint src/ --ext .ts,.tsx
          npx tsc --noEmit

      - name: Security audit
        run: |
          npm audit --audit-level moderate
          cd frontend && npm audit --audit-level moderate

  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for database
        run: |
          echo "Waiting for database to be ready..."
          sleep 10
          echo "Database should be ready now"

      - name: Setup test database
        run: |
          npx prisma generate
          npx prisma db push --accept-data-loss
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: Run backend tests
        run: npm test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          PLAID_CLIENT_ID: test_client_id
          PLAID_SECRET: test_secret
          OPENAI_API_KEY: test_openai_key

  # Frontend Build
  frontend-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install frontend dependencies
        run: cd frontend && npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-build]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for database
        run: |
          echo "Waiting for database to be ready..."
          sleep 10
          echo "Database should be ready now"

      - name: Setup test database
        run: |
          npx prisma generate
          npx prisma db push --accept-data-loss
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          PLAID_CLIENT_ID: test_client_id
          PLAID_SECRET: test_secret
          OPENAI_API_KEY: test_openai_key
          FRED_API_KEY: test_fred_key
          ALPHA_VANTAGE_API_KEY: test_alpha_vantage_key

  # Build Verification
  build-verification:
    runs-on: ubuntu-latest
    needs: [lint-and-test, backend-tests, frontend-build, integration-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci

      - name: Verify backend build
        run: |
          npx tsc --noEmit
          npm run build:backend

      - name: Verify frontend build
        run: |
          cd frontend
          npm run build

  # Deployment (only on main branch) - DISABLED
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [build-verification]
  #   if: github.ref == 'refs/heads/main'
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Deploy to Vercel
  #       uses: amondnet/vercel-action@v25
  #       with:
  #         vercel-token: ${{ secrets.VERCEL_TOKEN }}
  #         vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
  #         vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
  #         vercel-args: '--prod'

  #     - name: Deploy to Render
  #       run: |
  #         echo "Render deployment is handled automatically via GitHub integration"
  #         echo "Deployment status will be available in Render dashboard" 