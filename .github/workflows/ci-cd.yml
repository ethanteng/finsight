name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Code Quality & Security
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          # Retry npm ci with exponential backoff for network issues
          for i in 1 2 3; do
            echo "Attempt $i of 3: Installing dependencies..."
            npm ci --prefer-offline --no-audit || {
              if [ $i -eq 3 ]; then
                echo "Failed to install dependencies after 3 attempts"
                exit 1
              fi
              echo "Attempt $i failed, retrying in $((i * 10)) seconds..."
              sleep $((i * 10))
            } && break
          done
          
          # Install frontend dependencies
          cd frontend
          for i in 1 2 3; do
            echo "Attempt $i of 3: Installing frontend dependencies..."
            npm ci --prefer-offline --no-audit || {
              if [ $i -eq 3 ]; then
                echo "Failed to install frontend dependencies after 3 attempts"
                exit 1
              fi
              echo "Attempt $i failed, retrying in $((i * 10)) seconds..."
              sleep $((i * 10))
            } && break
          done

      - name: Lint backend
        run: |
          npx eslint src/ --ext .ts
          npx tsc --noEmit --skipLibCheck --exclude "src/__tests__/integration/profile-anonymization-encryption-preservation.test.ts"

      - name: Lint frontend
        run: |
          cd frontend
          npx eslint src/ --ext .ts,.tsx
          npx tsc --noEmit --skipLibCheck

      - name: Security audit
        run: |
          npm audit --audit-level moderate
          cd frontend && npm audit --audit-level moderate

  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          # Retry npm ci with exponential backoff for network issues
          for i in 1 2 3; do
            echo "Attempt $i of 3: Installing dependencies..."
            npm ci --prefer-offline --no-audit || {
              if [ $i -eq 3 ]; then
                echo "Failed to install dependencies after 3 attempts"
                exit 1
              fi
              echo "Attempt $i failed, retrying in $((i * 10)) seconds..."
              sleep $((i * 10))
            } && break
          done

      - name: Wait for database
        run: |
          echo "Waiting for database to be ready..."
          sleep 10
          echo "Database should be ready now"

      - name: Setup test database
        run: |
          npx prisma generate
          npx prisma migrate reset --force
          npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          NODE_ENV: test

      - name: Run backend unit tests with coverage
        run: npm run test:coverage:unit
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          PLAID_CLIENT_ID: test_client_id
          PLAID_SECRET: test_secret
          PLAID_ENV: sandbox
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          FRED_API_KEY: ${{ secrets.FRED_API_KEY }}
          ALPHA_VANTAGE_API_KEY: ${{ secrets.ALPHA_VANTAGE_API_KEY }}
          SEARCH_API_KEY: ${{ secrets.SEARCH_API_KEY }}
          FINNHUB_API_KEY: test_finnhub_key
          POLYGON_API_KEY: test_polygon_key
          PROFILE_ENCRYPTION_KEY: "QffTMJcTkYC8Nyk/T9jH83958GLtdei8YzgDQ0PDCaw="
          JWT_SECRET: test-jwt-secret-for-security-tests
          NODE_ENV: test
          ENABLE_USER_AUTH: "true"
          ENABLE_TIER_ENFORCEMENT: "true"
          ADMIN_EMAILS: "admin@example.com,test@example.com"
          RESEND_API_KEY: test-resend-key
          STRIPE_PRICE_STARTER: price_starter_test
          STRIPE_PRICE_STANDARD: price_standard_test
          STRIPE_PRICE_PREMIUM: price_premium_test

      - name: Upload unit test coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unit
          name: unit-tests
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # Frontend Build
  frontend-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install frontend dependencies
        run: |
          cd frontend
          # Retry npm ci with exponential backoff for network issues
          for i in 1 2 3; do
            echo "Attempt $i of 3: Installing frontend dependencies..."
            npm ci --prefer-offline --no-audit || {
              if [ $i -eq 3 ]; then
                echo "Failed to install frontend dependencies after 3 attempts"
                exit 1
              fi
              echo "Attempt $i failed, retrying in $((i * 10)) seconds..."
              sleep $((i * 10))
            } && break
          done

      - name: Build frontend
        run: |
          cd frontend
          npm run build

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-build]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          # Retry npm ci with exponential backoff for network issues
          for i in 1 2 3; do
            echo "Attempt $i of 3: Installing dependencies..."
            npm ci --prefer-offline --no-audit || {
              if [ $i -eq 3 ]; then
                echo "Failed to install dependencies after 3 attempts"
                exit 1
              fi
              echo "Attempt $i failed, retrying in $((i * 10)) seconds..."
              sleep $((i * 10))
            } && break
          done

      - name: Wait for database
        run: |
          echo "Waiting for database to be ready..."
          sleep 10
          echo "Database should be ready now"

      - name: Setup test database
        run: |
          npx prisma generate
          npx prisma migrate reset --force
          npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          NODE_ENV: test

      - name: Run integration tests with coverage
        run: npm run test:coverage:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          PLAID_CLIENT_ID: test_client_id
          PLAID_SECRET: test_secret
          PLAID_ENV: sandbox
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          FRED_API_KEY: ${{ secrets.FRED_API_KEY }}
          ALPHA_VANTAGE_API_KEY: ${{ secrets.ALPHA_VANTAGE_API_KEY }}
          SEARCH_API_KEY: ${{ secrets.SEARCH_API_KEY }}
          FINNHUB_API_KEY: test_finnhub_key
          POLYGON_API_KEY: test_polygon_key
          PROFILE_ENCRYPTION_KEY: "QffTMJcTkYC8Nyk/T9jH83958GLtdei8YzgDQ0PDCaw="
          JWT_SECRET: test-jwt-secret-for-security-tests
          NODE_ENV: test
          ENABLE_USER_AUTH: "true"
          ENABLE_TIER_ENFORCEMENT: "true"
          ADMIN_EMAILS: "admin@example.com,test@example.com"
          RESEND_API_KEY: test-resend-key
          STRIPE_PRICE_STARTER: price_starter_test
          STRIPE_PRICE_STANDARD: price_standard_test
          STRIPE_PRICE_PREMIUM: price_premium_test

      - name: Upload integration test coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: integration
          name: integration-tests
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # Build Verification
  build-verification:
    runs-on: ubuntu-latest
    needs: [lint-and-test, backend-tests, frontend-build, integration-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          # Retry npm ci with exponential backoff for network issues
          for i in 1 2 3; do
            echo "Attempt $i of 3: Installing dependencies..."
            npm ci --prefer-offline --no-audit || {
              if [ $i -eq 3 ]; then
                echo "Failed to install dependencies after 3 attempts"
                exit 1
              fi
              echo "Attempt $i failed, retrying in $((i * 10)) seconds..."
              sleep $((i * 10))
            } && break
          done
          
          # Install frontend dependencies
          cd frontend
          for i in 1 2 3; do
            echo "Attempt $i of 3: Installing frontend dependencies..."
            npm ci --prefer-offline --no-audit || {
              if [ $i -eq 3 ]; then
                echo "Failed to install frontend dependencies after 3 attempts"
                exit 1
              fi
              echo "Attempt $i failed, retrying in $((i * 10)) seconds..."
              sleep $((i * 10))
            } && break
          done

      - name: Enforce no-migrate-in-build
        run: bash scripts/check-no-migrate-in-build.sh

      - name: Verify backend build
        run: |
          npx tsc --noEmit --skipLibCheck --exclude "src/__tests__/integration/profile-anonymization-encryption-preservation.test.ts"
          npm run build:backend

      - name: Verify frontend build
        run: |
          cd frontend
          npm run build

  # Production Migration (only on main branch)
  migrate-prod:
    needs: [build-verification]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production   # requires manual approval in GitHub
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          # Retry npm ci with exponential backoff for network issues
          for i in 1 2 3; do
            echo "Attempt $i of 3: Installing dependencies..."
            npm ci --prefer-offline --no-audit || {
              if [ $i -eq 3 ]; then
                echo "Failed to install dependencies after 3 attempts"
                exit 1
              fi
              echo "Attempt $i failed, retrying in $((i * 10)) seconds..."
              sleep $((i * 10))
            } && break
          done

      - name: Apply migrations with guards
        run: bash scripts/migrate-with-guards.sh
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_PROD }}

  # Deployment (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [migrate-prod]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

      - name: Deploy to Render
        run: |
          echo "Deploying to Render..."
          
          # Option 1: Use Render webhook (requires RENDER_DEPLOY_HOOK secret)
          if [ -n "${{ secrets.RENDER_DEPLOY_HOOK }}" ]; then
            echo "Triggering Render deployment via webhook..."
            curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK }}"
            echo "Render deployment triggered successfully"
          else
            echo "No RENDER_DEPLOY_HOOK secret found"
          fi
          
          # Option 2: Direct deployment with Render CLI (alternative approach)
          # if [ -n "${{ secrets.RENDER_API_KEY }}" ]; then
          #   echo "Installing Render CLI..."
          #   npm install -g @render/cli
          #   echo "Deploying to Render via CLI..."
          #   render deploy --service-id ${{ secrets.RENDER_SERVICE_ID }}
          # else
          #   echo "No RENDER_API_KEY secret found, skipping CLI deployment"
          # fi 